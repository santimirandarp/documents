Why to have a GitHub repo.

Git helps to deal with repositories that we change and we're not sure 
about those changes. Or to keep python2.7 and python3 versions of 
the same project. So we create branches. 

But yet, if the PC breaks all is gone. So it's good to have a repo host for free in the web.
And we can also publish them, or part, as github pages. And we can collaborate with 
different people. There are many reasons to have both Git and GitHub working together.

Useful commands
* git init: initiates Version Control on the system (watch for changes).
* git status. Git's got 3 stages for files. Tracked, Untracked and commited. New files are Untracked. 
Added files are tracked. Unfortunately, there are too many words used for added files: tracked, indexed, staged, added, etc. Git status also informs about commited files. Commited changes are the only ones seen by a push. 
* git add ['file(s)', 'directories'..]
* git commit [option]
(option is optional, that's why it's between sq brackets)
* git commit -am "indented gulpfile"
Slightly more advanced commands
* git pull & git push
* git clone giturl
* git remote add origin url
we access the config by dot notation. For example, the previous command 
* git checkout -b branchname: creates a new branch named branchname and switches to it.
* git checkout branchname: just switches to a branch (might be master or any other).
* git merge master: if you're happy with the branch it can be merged with master branch.
* git config --list
prints on my account:

user.email=santimir.me@gmail.com
user.name=Santi
core.editor=vim
color.ui=true
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.misterybodon.url=https://github.com/misterybodon/web.git
remote.misterybodon.fetch=+refs/heads/*:refs/remotes/misterybodon/*

				       branch.master.remote=misterybodon
				       branch.master.merge=refs/heads/master
				       user.email=misterybodon@gmail.com
				       user.name=Mister Nobody

				       For changing or setting up we do 

				       git config --list user.name "Your Name"

				       Git config it's worth to use and set up properly.

				       We can set configs system wide, global, and local.
				       I've set just global and local (system is one config for many users, though in my case would be the same)

				       We do that with the flags: --system, --global, --local.
				       Example: git config --local user.name "your@mail"

				       Each of those files is stored a different location of the system.

				       GitHub is a service that provides Git repository hosting. 

				       SSH on github
				       Using the SSH protocol, you can connect and authenticate to remote servers and services. 

				       If we don't have one already (ls -al $HOME/.ssh should be empty or inexistent)
				       we can set one.
We create  ssh key 
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
