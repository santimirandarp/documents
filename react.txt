'Break the UI into basic, meaningful parts, and those become your Components.'

MIXING HTML and JS

- We write normal HTML as a return value of functions. 
- Inside the HTML we can write any JS but between  { js here }. 
- Out of the HTML tags we write normal js.


HTML differences
- All attributes are camelcase. className, onClick, etc.
to render a component.

Example:

//from npm
from react import React
from react-dom import ReactDOM;
const insertThis  = "but good"
const JSX = (<div id="myDiv"><h1 className="reddish"> The little {insertThis} document</h1></div>)
//JSX is always equal to a wrapper element.
ReactDOM.render(JSX, document.getElementById("root")) 



RENDERING
//1. runs all js, 
//2. puts the result into the html document.



COMPONENTS
JSX can be created using variables, functions or  classes. The last 2 are called Components. If created using function is called **stateless functional component**. Other components are **Stateful**. This components are always created using classes, and define this.state = {} in the constructor() of the class.
More on it in STATES.

Components in React start with a capital letter. And they are rendered as 
<Name/> either in ReactDOM.render([comp, var],targetElement) or render( ){ }. 

Components can be exported and imported. For example we could export 
<Nav/>, <Header/>, <Article/> and <Footer/> and import them in App.js
Next we create a parent component, containing all the previous components. Finally we use React render to get all done.

Class components are classes. Clases contain a constructor, and inside an optional super, to the constructor
of the parent component. It's equivalent to setting a prototype using constructors.

RENDER to html
Any element with id. Example ReactDOM.render(<Component/>, getElementById("id")>

        DEFAULT EXPORT

        //file.js
        import React from react
        function Component(){
        let JSX = <ul><li>Mue</li><li>Je Je</li></ul>
        return JSX
        }
        default export Component
        //file2.js
        import React from react
        import Component from './file'

        function ParentComponent(){
        let JSX = <div><p>Parent</p><Component/></div>
        }
        If we don't export it with a name (in this case Component), we can use any name in place of 
        import Component from './file'

EXPORT
//file.js
import React from react
function Component1(){
    let JSX = <ul><Child1/><Child2/></ul>
        return JSX
}
function Component2(){
    let JSX = <ul><li>Mue</li><li>Je Je</li></ul>
        return JSX
}
//default export Component
//this would export only Component and any child component
export Component1, Component2

PROPERTIES

<Name key={value}/>

Name is a component either functional or class. If defined as a function we pass (props){props.key} but if using a class component we use render(){this.props.key} to achieve the same thing. 


STATES
When react detects that this.state has changed, it re-renders the component.
BUT states shouldnt be modified as we would do: this.state.something = 'new value'
it should be modified using setState({new state here})
The **initial value** of state is given in the constructor.

class MyStatefulComponent extends React.Component{
    constructor(props){
        super(props);
        this.state = { posts:"allpostsHere"}
    }
    render() {
    const myposts = this.state.posts
    const JSX=(<div>
                <h2>New Posts</h2>
                <ul><li> We can render all posts like this: {this.state.posts}</li>
                <li> Or we can render like this {myposts}</li>
                <li>Second method pollutes less the markup</li>
                </ul>
                </div>)
                return JSX
    }
}

Stateless functions and stateless components just do not have this 'state' object. 

We pass state from parent to children using props (couldn't be easier).
import React from "react"

