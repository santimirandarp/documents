GIT/GitHub

Why to have a GitHub repo.

Git helps to deal with local projects. ex: keep python2.7 and python3 versions of 
the same project. So we create branches. 

But yet, if the PC breaks all is gone. So it's good to have a repo host for free in the web.
And we can also publish them, or part, as github pages. And we can collaborate with 
different people. There are many reasons to have both Git and GitHub working together.

Useful commands
* git init: initiates Version Control on the system (watch for changes).
* git status. Git's got 3 stages for files. Tracked, Untracked and commited. New files are Untracked. 
Added files are tracked. Unfortunately, there are too many words used for added files: tracked, indexed, staged, added, etc. Git status also informs about commited files. Commited changes are the only ones seen by a push. 
* git add ['file(s)', 'directories'..]
* git commit [option]
(option is optional, that's why it's between sq brackets)
* git commit -am "indented gulpfile"
Slightly more advanced commands
* git push cleaning origin // git push --> git push currentBranch origin
(git push what towhere) same fr git pull. for branches the origin isn't the master in the remote repo. 
but it is the branch itself so we're pushing cleaning to cleaning
* git pull & git push
* git clone giturl
* git remote add origin url
we access the config by dot notation. For example, the previous command 
* git checkout -b branchname: creates a new branch named branchname and switches to it.
* git checkout branchname: just switches to a branch (might be master or any other).
* git merge master: if you're happy with the branch it can be merged with master branch.
* git config --list: lists the properties we've already set.
prints on my account:

user.email=santimir.me@gmail.com
user.name=Santi
core.editor=vim
color.ui=true
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.misterybodon.url=https://github.com/misterybodon/web.git
remote.misterybodon.fetch=+refs/heads/*:refs/remotes/misterybodon/*

branch.master.remote=misterybodon
branch.master.merge=refs/heads/master
user.email=misterybodon@gmail.com
user.name=Mister Nobody

For changing or setting up we do 

git config user.name "Your Name"

Git config it's worth to use and set up properly.

We can set configs system wide, global, and local.
I've set just global and local (system is one config for many users, though in my case would be the same)

We do that with the flags: --system, --global, --local.
Example: git config --local user.name "your@mail"

Each of those files is stored a different location of the system.

GitHub is a service that provides Git repository hosting. 

SSH on github

Advantage over http: we don't need to log in everytime, as long as the ssh-agent is 
running in the background.

If `ls -al $HOME/.ssh` is empty or 
If it's not empty and we don't want to use a previous key, 

We create  ssh key 
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

and put it under `ssh-add ~/.ssh/filename` 

Whenever we want to connect to a server using ssh type:
`eval "$(ssh-agent -s)"`

We need to add filename.pub to github (settings-->sshkeys)

The code can be copied after typing `cat filename.pub`

=================================================



NPM

- It is a package manager ---> install/remove/update packages.
- package.json and configs to easy run projects and share them.



List of npm commands:


* npm init: initiates a project.
* npm install [package name] [-g, --global, --save, --save-dev]
w/o global, it's locally installed and only accessible for the current project.
Packages, usage, tips to be found in the npm site. Global packages run on their own, 
4xample type live-server and it starts running.
* npm install, npm i : install all dependencies found in package.json
* npm init --yes
* npm config ls -l : shows ALL config for npm. Outputs all key value pairs that can be modified 
using `npm config set key value` or  `npm set key value`. 
* npm delete, npm remove
* npm list --depth N
- Dependencies are modules that the project is loading. Let's say a calculator project using `lodash`.

-On the other hand dev dependencies are important for developing the project further on.

-----------Installing another person's project

We don't have to execute npm init, everything is already there. 
Run `npm i` to get all modules.

In any case, to make use of npm modules in a .js file we need to import them. It's equivalent to 
paste the code in file.

-=---------Gulp

Gulp is different. Is run by the global package gulp-cli 
executed as gulp.

And it is executed as gulp <taskname> 
 
